Differences Between LDA And QDA

Created: 09/17/2023
Updated: 09/17/2023


LDA1 and QDA1: Describe distinct source files
# This is code for Linear Discriminant Analysis
# This is code for Quadratic Discriminant Analysis

LDA{34,35} and QDA{34,35}: Define distinct classes
class LDA:
    """Creates a class for Linear Discriminant Analysis
class QDA:
    """Creates a class for Quadratic Discriminant Analysis

LDA{71,72} and QDA{71,72}: Initialize a mean covariance matrix versus initialize a dictionary for class-specific covariance matrices
        # compute the mean covariance matrix
        self.cov = np.zeros([self.num_cols, self.num_cols])
        # compute the covariance matrix of each class
        self.covs = dict()

LDA{74,75} and QDA74: Calculate mean covariance matrix versus calculate class-specific covariance matrix
            self.cov = self.cov + self.num_obs[name] * np.cov(np.transpose(self.data[self.data_labels == name, :]))
        self.cov = self.cov / self.num_rows
            self.covs[name] = np.cov(np.transpose(self.data[self.data_labels == name, :]))

LDA92 and QDA91: Construct multivariate Gaussian Probability Density Function with mean covariance matrix versus class-specific covariance matrix
            likelihoods[idx] = multivariate_gaussian_pdf(x, self.means[name], self.cov)
            likelihoods[idx] = multivariate_gaussian_pdf(x, self.means[name], self.covs[name])

LDA94: Remove of blank line

LDA{99,100} and QDA{97,98}: Change described model
        print('LDA Predicted Class: ' + self.class_names[indices_sorted[0]])
        print('LDA Class Likelihoods:')
        print('QDA Predicted Class: ' + self.class_names[indices_sorted[0]])
        print('QDA Class Likelihoods:')

LDA112 and QDA110: Changed model name and constructor
model_lda = LDA('iris_data.csv')
model_qda = QDA('iris_data.csv')

LDA115 and QDA 113: Changed use of model
model_lda.compute_likelihoods(Iris_setosa_observation)
model_qda.compute_likelihoods(Iris_setosa_observation)

LDA{122,123} and QDA{120,121}: Changed use of model
model_lda.compute_probabilities(Iris_setosa_observation, uninformative_priors)
print(model_lda)
model_qda.compute_probabilities(Iris_setosa_observation, uninformative_priors)
print(model_qda)